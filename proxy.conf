SSLProxyEngine On

# TODO: allow setting a server cert
# SSLCertificateFile /etc/pki/tls/certs/localhost.crt
# SSLCertificateKeyFile /etc/pki/tls/private/localhost.key
# SSLCACertificateFile /etc/pki/CA/certs/ca.crt

# TODO: allow setting a proxy client cert
# SSLProxyMachineCertificateFile /etc/pki/tls/certs/authproxy.pem

# TODO: allow setting a CA and enabling backend cert validation
# SSLProxyCACertificateFile /etc/pki/CA/certs/ca.crt
SSLProxyCheckPeerCN Off
SSLProxyCheckPeerName Off
SSLProxyCheckPeerExpire Off

# In order to use the basic-auth proxy, an X-Csrf-Token must be present
# Fail anything matching /basic that doesn't have that header
RewriteEngine On
RewriteCond %{REQUEST_URI} ^/basic/?
RewriteCond %{HTTP:X-Csrf-Token} ^$ [NC]
RewriteRule ^.* - [F,L]

# Kerberos auth-protected
<Location /negotiate/>
    ProxyPass example.com/

    AuthType Kerberos
    AuthName "Kerberos Login"
    Require valid-user
    RequestHeader set Remote-User %{REMOTE_USER}s

    KrbMethodNegotiate on
    KrbMethodK5Passwd off
    KrbServiceName HTTP
    KrbAuthRealms MYDOMAIN.COM
    KrbVerifyKDC on
    Krb5Keytab /etc/httpd.keytab
    KrbSaveCredentials off
</Location>

# Basic auth-protected
<Location /basic/>
    ProxyPass example.com/

    AuthType Basic
    AuthName "Basic Login"
    Require valid-user
    RequestHeader set Remote-User %{REMOTE_USER}s

    AuthBasicProvider file
    AuthUserFile /etc/httpd.htpasswd
</Location>

# Form auth-protected
<Location /form/>
    ProxyPass example.com/

    AuthType form
    AuthName "Form Login"
    Require valid-user
    RequestHeader set Remote-User %{REMOTE_USER}s

    AuthFormProvider file
    AuthUserFile /etc/httpd.htpasswd

    ErrorDocument 401 /login.html
</Location>

RequestHeader unset Remote-User
RequestHeader unset X-Remote-User
