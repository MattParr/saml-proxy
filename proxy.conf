SSLProxyEngine On

# TODO: allow setting a server cert
# SSLCertificateFile /etc/pki/tls/certs/localhost.crt
# SSLCertificateKeyFile /etc/pki/tls/private/localhost.key
# SSLCACertificateFile /etc/pki/CA/certs/ca.crt

# TODO: allow setting a proxy client cert
# SSLProxyMachineCertificateFile /etc/pki/tls/certs/authproxy.pem

# TODO: allow setting a CA and enabling backend cert validation
# SSLProxyCACertificateFile /etc/pki/CA/certs/ca.crt
SSLProxyCheckPeerCN Off
SSLProxyCheckPeerName Off
SSLProxyCheckPeerExpire Off

# In order to use the basic-auth proxy, an X-Csrf-Token must be present
# Fail anything matching /mod_auth_basic that doesn't have that header
RewriteEngine On
RewriteCond %{REQUEST_URI} ^/mod_auth_basic/?
RewriteCond %{HTTP:X-Csrf-Token} ^$ [NC]
RewriteRule ^.* - [F,L]

# Kerberos auth-protected
<Location /mod_auth_gssapi/>
	ProxyPass example.com/

	AuthType GSSAPI
	AuthName "GSSAPI Login"
	Require valid-user

	# Set the request header from the envvar if it exists
	RequestHeader set Remote-User %{REMOTE_USER}s

	GssapiCredStore keytab:/etc/httpd.keytab
</Location>

# Kerberos auth-protected with basic fallback
<Location /mod_auth_gssapi_basic/>
	ProxyPass example.com/

	AuthType GSSAPI
	AuthName "GSSAPI Login"
	Require valid-user

	# Set the request header from the envvar if it exists
	RequestHeader set Remote-User %{REMOTE_USER}s

	GssapiCredStore keytab:/etc/httpd.keytab
	GssapiBasicAuth on
</Location>

# Kerberos auth-protected
<Location /mod_auth_kerb/>
	ProxyPass example.com/

	AuthType Kerberos
	AuthName "Kerberos Login"
	Require valid-user

	# Set the request header from the envvar if it exists
	RequestHeader set Remote-User %{REMOTE_USER}s

	KrbMethodNegotiate on
	KrbMethodK5Passwd off
	KrbServiceName HTTP
	KrbAuthRealms MYDOMAIN.COM
	KrbVerifyKDC on
	Krb5Keytab /etc/httpd.keytab
	KrbSaveCredentials off
</Location>

# Kerberos auth-protected with basic fallback
<Location /mod_auth_kerb_basic/>
	ProxyPass example.com/

	AuthType Kerberos
	AuthName "Kerberos Login"
	Require valid-user

	# Set the request header from the envvar if it exists
	RequestHeader set Remote-User %{REMOTE_USER}s

	KrbMethodNegotiate on
	KrbMethodK5Passwd on
	KrbServiceName HTTP
	KrbAuthRealms MYDOMAIN.COM
	KrbVerifyKDC on
	Krb5Keytab /etc/httpd.keytab
	KrbSaveCredentials off
</Location>

# Basic auth-protected
<Location /mod_auth_basic/>
	ProxyPass example.com/

	AuthType Basic
	AuthName "Basic Login"
	Require valid-user

	# Set the request header from the envvar if it exists
	RequestHeader set Remote-User %{REMOTE_USER}s env=REMOTE_USER

	AuthBasicProvider PAM
	AuthPamService httpd-pam
</Location>

# Form auth-protected
<Location /mod_auth_form/>
	ProxyPass example.com/

	AuthType form
	AuthName "Form Login"
	Require valid-user

	# Set the request header from the envvar if it exists
	RequestHeader set Remote-User %{REMOTE_USER}s env=REMOTE_USER

	AuthFormProvider file
	AuthUserFile /etc/httpd.htpasswd

	ErrorDocument 401 /login.html
</Location>


LoadModule authnz_pam_module modules/mod_authnz_pam.so
LoadModule intercept_form_submit_module modules/mod_intercept_form_submit.so

<Location /mod_intercept_form_submit/>
	ProxyPass example.com/

	# Defined in /etc/pam.d/httpd-pam
	InterceptFormPAMService httpd-pam

	# Use the httpd_username/httpd_password fields from the login POST
	InterceptFormLogin httpd_username
	InterceptFormPassword httpd_password

	# Automatically append the correct realm
	InterceptFormLoginRealms EXAMPLE.COM

	# Show the login page for GET requests
	RewriteCond %{REQUEST_METHOD} GET
	RewriteRule ^.*$ /login.html [L]

	# Set the request header from the envvar if it exists
	RequestHeader set Remote-User %{REMOTE_USER}s env=REMOTE_USER
</Location>



RequestHeader unset Remote-User
RequestHeader unset X-Remote-User
